const { Builder, By } = require('selenium-webdriver');

async function navigationTest() {
    const urls = [
        'https://idwibwyk.github.io/groom-room/',
        'https://idwibwyk.github.io/groom-room/price.html',
        'https://idwibwyk.github.io/groom-room/form.html'
    ];

    const menuItems = [
        {text: '–ì–ª–∞–≤–Ω–∞—è', url: 'index.html'},
        {text: '–£—Å–ª—É–≥–∏', url: 'price.html'},
        {text: '–ü—Ä–∞–π—Å-–ª–∏—Å—Ç', url: 'price.html'},
        {text: '–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã', url: '#gallery'},
        {text: '–û –Ω–∞—Å', url: '#about'},
        {text: '–ó–∞–ø–∏—Å—å –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É', url: 'form.html'}
    ];

    for (const pageUrl of urls) {
        let driver = await new Builder().forBrowser('chrome').build();
        try {
            console.log(` –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageUrl}`);
            await driver.get(pageUrl);

            for (const item of menuItems) {
                const link = await driver.findElement(By.linkText(item.text));
                await link.click();
                await driver.sleep(1000);

                if (item.url.startsWith('#')) {
                    const id = item.url.substring(1);
                    const elements = await driver.findElements(By.id(id));
                    if (elements.length === 0) {
                        throw new Error(` –û—à–∏–±–∫–∞: –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageUrl} –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å id="${id}" (–¥–ª—è –º–µ–Ω—é "${item.text}")`);
                    } else {
                        console.log(` –Ø–∫–æ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ "${item.text}" –Ω–∞–π–¥–µ–Ω–∞ (#${id})`);
                    }
                } else {
                    const currentUrl = await driver.getCurrentUrl();
                    if (!currentUrl.includes(item.url)) {
                        throw new Error(` –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ '${item.text}' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ${pageUrl}. –û–∂–∏–¥–∞–ª–∏ ${item.url}, –ø–æ–ª—É—á–∏–ª–∏ ${currentUrl}`);
                    } else {
                        console.log(` –°—Å—ã–ª–∫–∞ "${item.text}" –ø–µ—Ä–µ—à–ª–∞ –Ω–∞ ${item.url}`);
                    }
                }

                if (item.text !== '–ì–ª–∞–≤–Ω–∞—è') {
                    await driver.navigate().back();
                    await driver.sleep(500);
                }
            }
        } catch (err) {
            console.error(err.message);
        } finally {
            await driver.quit();
        }
    }

    console.log('üèÅ –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω');
}

module.exports = navigationTest;
